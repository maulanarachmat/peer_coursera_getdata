?file.path
nxt()
file.path("mytest3.R", "folder1")
file.path("folder1","folder2")
?dir.create
play()
?file.path
nxt()
dir.create("testdir2",recursive = TRUE, filepath("testdir3"))
dir.create("testdir2",recursive = TRUE, file.path("testdir3"))
dir.create(file.path("testdir2","testdir3"), recursive = TRUE)
setwd("old.dir")
setwd(old.dir)
dir()
unlink("testdir", recursive = TRUE)
swirl()
1:20
pi:10
15:1
`:`
?`:`
seq(1, 20)
seq(0, 10, by=0.5)
my_seq <- seq(5,10,length=30)
length(my_seq)
length(my_seq)
1:length(my_seq)
seq(along.with = my_seq)
seq_along(my_seq)
rep(0, times=40)
rep(c(0,1,2), times=10)
rep(c(0,1,2), each=10)
c(0.5, 55, -10, 6)
num_vect<-c(0.5, 55, -10, 6)
tf <- num_vect<1
tf
num_vect>=6
my_char<- c("My", "name", "is")
my_char
paste(my_char, collapse = " ")
c(my_char, "maulana")
my_name <- c(my_char, "maulana")
my_name
paste(my_name, collapse = " ")
paste("Hello","world!", sep = " ")
paste(c(1:3),c("X","Y","Z"),sep = "")
paste(LETTERS, 1:4, sep = "-")
swirl()
x<- c(44, NA, 5, NA)
x*3
y<-rnorm(1000)
z<-rep(NA, 1000)
my_data <- sample(c(y,z),100)
my_na <-is.na(my_data)
my_na
my_data == NA
play()
?sum
nxt()
sum(my_na)
my_data
0/0
inf-inf
Inf - Inf
info()
bye()
swirl()
bye()
swirl()
x
x[1:10]
x[is.na(x)]
y<-x[!is.na(x)]
y
y[y>0]
x[x>0]
x{!is.na(x) & x>0}
x[!is.na(x) & x>0]
x[c(3,5,7)]
x[0]
x[3000]
x[c(-2,-10)]
x[-c(2,10)]
vect <- c(foo=11, bar=2, norf=Na)
vect <- c(foo=11, bar=2, norf=NA)
vect
names(vext)
names(vect)
vect2<- c(11, 2, NA)
names(vect2) <- c("foo", "bar", "norf")
vect2
identical(vect,vect2)
vect["bar"]
vect{c{"foo","bar"}}
vect[c("foo","bar")]
my_vector <- c(1:20)
my_vector <- 1:20
my_vector
dim(my_vector)
length(my_vector)
dim(my_vector) <- c(4.5)
dim(my_vector) <- c(4,5)
dim(my_vector)
attributes(my_vector)
my_vector
class(my_vector)
My_matrix <- my_vector
my_matrix <- my_vector
?matrix
my_matrix2 <-matrix(1:20, nrow=4, ncol=5)
identical(my_matrix,my_matrix2)
patients <- c("Bill", "Gina", "Kelly", "Sean")
cbind(patients,My_matrix)
cbind(patients,my_matrix)
my_data <-data.frame(patients, my_matrix)
my_data
class(my_data)
c("patient","age","weight","bp","rating","test")
c("patient","age","weight","bp","rating","test")
play()
nxt()
cnames <- c("patient","age","weight","bp","rating","test")
colnames(cnames)
colnames(my_data) <- cnames
my_data
mydata < rnorm((100))
mydata < rnorm(100)
mydata <- rnorm(100)
sd(mydata)
sd(x=mydata)
sd(x=mydata, na.rm = false)
sd(x=mydata, na.rm = FALSE)
sd(na.rm = FALSE, x=mydata)
sd(na.rm = FALSE, mydata)
?lm
swirl()
swirl()
library(swirl)
swirl()
TRUE == TRUE
FALSE == TRUE
(FALSE == TRUE) == FALSE
6 == 7
6 < 7
10 <= 10
5 != 7
5 != 7
!(5 == 7)
FALSE & FALSE
TRUE & C (TRUE, FALSE, FALSE)
TRUE & c(TRUE, FALSE, FALSE)
TRUE && c(TRUE, FALSE, FALSE)
TRUE | c(TRUE, FALSE, FALSE)
TRUE || c(TRUE, FALSE, FALSE)
5 > 8 || 6! = 8 && 4 > 3.9
5 > 8 || 6 != 8 && 4 > 3.9
isTRUE( 6 > 4)
identical('twins', 'twins')
xor(5 == 6, !FALSE)
ints <- sample(10)
ints
ints > 5
which(ints > 7)
any(ints < 0)
all(ints>0)
Sys.Date()
mean(c(2, 4, 5))
submit()
boring_function('My first function!')
boring_function()
boring_function
submit()
my_mean(c(4,5,10))
submit()
remainder(5)
remainder(11,5)
remainder(divisor = 11, num = 5)
remainder(4, div=2)
args(remainder)
submit()
submit()
evaluate(sd, c(1.4,3.6,7.9,8.8))
evaluate
evaluate(function(x){x+1}, 6)
evaluate(function(x){x},c(8,4,0))
evaluate(function(x){x[]},c(8,4,0))
evaluate(function(x){x[1]},c(8,4,0))
evaluate(function(x){x[3]},c(8,4,0))
evaluate(function(x){length(x)},c(8,4,0))
evaluate(function(x){x[length(x)]},c(8,4,0))
?paste
paste("Programming","is","fun!")
submit()
submit()
submit()
telegram(hello world)
telegram("hello world")
submit()
submit()
mad_libs("jakarta", "sunny", "toilet")
submit()
submit()
submit()
'I' %p% 'love' %p% 'R'
'I' %p% 'love' %p% 'R!'
d1 <- Sys.Date()
class(d1)
unclass(d1)
d1
d2 <- as.Date("1969-01-01")
unclass(d2)
t1<-Sys.time()
t1
class(t1)
unclass(t1)
t2 <- as.POSIXlt(Sys.time())
class(t2)
t2
unclass(t2)
str(unclass(tw))
str(unclass(t2))
t2$min
weekdays(d1)
months(t1)
quarters(t2)
t3 <- "October 17, 1986 08:24"
t4 <- strptime(t3, "%B %d, %Y %H:%M")
t4
class(t4)
Sys.time() > t1
Sys.time() - t1
difftime
difftime(Sys.time(),t1, units = 'days')
x^3
cube(3)
cube(3)
cube <- function(x,n){
x^3
}
cube(3)
x <- 1:10
if(x>5){
x <-0
}
x
x>5
x>5 <- 0
y <- x>5
y
f <- function(x) {
g <- function(y) {
y + z
}
z <- 4
x + g(x)
}
f(3)
f <- function(x) {
g <- function(y) {
y + z
}
z <- 4
x + g(x)
}
f <- function(x) {
g <- function(y) {
y + z
}
z <- 10
x + g(x)
}
f(3)
x <- 5
y <- if(x < 3) {
NA
} else {
10
}
y
f <- function(x) {
g <- function(y) {
y + z
}
z <- 4
x + g(x)
}
z <- 10
f(3)
datasets
library(datasets)
data("mtcars")
with(mtcars, tapply(mpg, cyl, mean))
sapply(split(mtcars$mpg, mtcars$cyl), mean)
tapply(mtcars$mpg, mtcars$cyl, mean)
library(datasets)
data("iris")
head(iris)
tapply(iris$Sepal.Length, iris$Species, mean)
apply(iris[,1:4], 2, mean)
mean(mtcars$mpg, mtcars$cyl)
sapply(mtcars, cyl, mean)
split(mtcars, mtcars$cyl)
lapply(mtcars, mean)
head(mtcars)
tapply(mtcars$hp, mtcars$cyl, mean)
209.21429-82.63636
View(iris)
makeVector <- function(x = numeric())
{
m <- NULL
set <- function(y)
{
x <<- y
m <<- NULL
}
get <- function() x
setmean <- function(mean) m <<- mean
getmean <- function() m
list(set = set, get = get,
setmean = setmean,
getmean = getmean)
}
cachemean <- function(x, ...) {
m <- x$getmean()
if(!is.null(m)) {
message("getting cached data")
return(m)
}
data <- x$get()
m <- mean(data, ...)
x$setmean(m)
m
}
a<- makeVector(1:10)
a$get()
cachemean(a)
makeVector(11:15)
a
a<- makeVector(11:15)
cachemean(a)
a$set(15:20)
cachemean(a)
cachemean(a)
a$set(11:15)
cachemean(a)
makeCacheMatrix <- function(s = matrix()) {
n <- NULL
set <- function(q){
s <<- q
n <<- NULL
}
get <- function()s
setinvers <- function(solve) n <<- solve
getinvers <- function () n
list(set = set, get = get,
setinvers = setinvers,
getinvers = getinvers)
}
cacheSolve <- function(s, ...) {
## Return a matrix that is the inverse of 'x'
n <- s$getinvers()
if(!is.null(n)){
message("getting cached data")
return(n)
}
datam <- s$get()
n <- solve(datam, ...)
s$setinvers(n)
n
}
matrix(c(2,4,2,4) nrow = 2, ncol = 2)
matrix(c(2,4,2,4), nrow = 2, ncol = 2)
makeCacheMatrix(c(2,4,2,4), nrow=2, ncol=2)
makeCacheMatrix(c(2,4,2,4))
makeCacheMatrix(matrix(c(2,4,2,4), nrow = 2, ncol = 2))
a<-matrix(c(2,4,2,4), nrow = 2, ncol = 2)
solve(a)
a
solve(a, ...)
solve(a, diag(1, 2, 2))
b <- diag(1, 2, 2)
b
solve(a,b)
a<-matrix(c(2,1,3,2), nrow = 2, ncol = 2)
solve(a,b)
makeCacheMatrix(matrix(c(2,1,3,2), nrow = 2, ncol = 2))
makeCacheMatrix <- function(s = matrix()) {
n <- NULL
set <- function(q){
s <<- q
n <<- NULL
}
get <- function()s
setinvers <- function(solve) n <<- solve
getinvers <- function () n
list(set = set, get = get,
setinvers = setinvers,
getinvers = getinvers)
}
cacheSolve <- function(s, ...) {
## Return a matrix that is the inverse of 'x'
n <- s$getinvers()
if(!is.null(n)){
message("getting cached data")
return(n)
}
datam <- s$get()
n <- solve(datam, ...)
s$setinvers(n)
n
}
a <- makeCacheMatrix(matrix(c(2,1,3,2), nrow = 2, ncol = 2))
cacheSolve(a)
cacheSolve(a)
?getwd
?mean
?inverse.rle
a <- makeCacheMatrix(matrix(c(1,1,0,2,3,2,2,1,3), nrow = 3, ncol = 3))
a
cacheSolve(a)
cacheSolve(a)
library(swirl)
swirl()
ls()
class(plants)
dim(plants)
nrow(plants)
nclol(plants)
ncol(plants)
object.size(plants)
names(plants)
head(plants)
head(plants)
head(plants,10)
tail(plants, 15)
summary(plants)
table(plants$Active_Growth_Period)
str(plants)
set.seed(1)
rpois(5.2)
set.seed(10)
x<- rep(0:1, each=5)
e<- rnorm(10, 0, 20)
y <- 0.5 +2*x+e
y
?rep
library(datasets)
Rprof()
fit <- lm(y~x1 +x2)
fit <- lm(y ~ x1 + x2)
set.seed(1)
rpois(5, 2)
library(swirl)
swirl()
?sample
sample(1:6, 4, replace = TRUE)
sample(1:6, 4, replace = TRUE)
sample(1:20, 10, replace = FALSE)
sample(1:20, 10)
LETTERS
sample(LETTERS)
flips <- sample(c(0,1), 100, replace = TRUE, prob = c(0.3,0.7))
flips
sum(flips)
?rbinom
rbinom(1, size = 100, prob = 0.7)
flips2 <-rbinom(1, size = 100, prob = 0.7)
flips2 <-rbinom(1, 100, 0.7)
info()
flips2
flips2 <- (100,1,0.7)
flips2 <-rbinom(100, 1, 0.7)
flips2
sum(flips2)
?rnorm
rnorm(10)
rnorm(10, 100, 25)
?rpois
rpois(5, 10)
replicate(100, rpois)
replicate(100, rpois(5,10))
my_pois <- replicate(100, rpois(5,10))
my_pois
cm <- colMeans(my_pois)
hist(cm)
data(cars)
?cars
head(cars)
plot(cars$speed,cars$dist)
plot(cars)
?plot
plot(x=cars$speed, y=cars$dist)
plot(x=cars$dist, y=cars$speed)
plot(x=cars$speed, y=cars$dist, xlab = "Speed")
plot(x=cars$speed, y=cars$dist, ylab = "Stopping Distance")
plot(x=cars$speed, y=cars$dist, xlab="Speed",ylab = "Stopping Distance")
plot(cars, main = "My Plot")
plot(cars, sub = "My Plot Subtitle")
?par
plot(cars, col = 2)
plot(cars, xlim = c(10,15))
plot(cars, pch = 2)
data(mtcars)
?boxplot
boxplot(formula = mpg ~ cyl, mtcars)
hist(mtcars$mpg)
q()
R.home()
source('~/GitHub/peer_coursera_getdata/run_analysis.R')
?ls
?summarise_all
source('~/GitHub/peer_coursera_getdata/run_analysis.R')
